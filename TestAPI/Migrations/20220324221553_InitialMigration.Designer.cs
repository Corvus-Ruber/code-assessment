// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestAPI.Database;

namespace TestAPI.Migrations
{
    [DbContext(typeof(WeatherDatabase))]
    [Migration("20220324221553_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestAPI.Models.Forecast", b =>
                {
                    b.Property<DateTime>("Id")
                        .HasColumnType("datetime2");

                    b.Property<int>("Celsius")
                        .HasColumnType("int");

                    b.Property<string>("SummaryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SummaryId");

                    b.ToTable("Forecasts");
                });

            modelBuilder.Entity("TestAPI.Models.Summary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CelsiusHigh")
                        .HasColumnType("int");

                    b.Property<int?>("CelsiusLow")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Summaries");

                    b.HasData(
                        new
                        {
                            Id = "Freezing",
                            CelsiusHigh = 5
                        },
                        new
                        {
                            Id = "Chilly",
                            CelsiusHigh = 10,
                            CelsiusLow = 5
                        },
                        new
                        {
                            Id = "Cool",
                            CelsiusHigh = 15,
                            CelsiusLow = 10
                        },
                        new
                        {
                            Id = "Mild",
                            CelsiusHigh = 20,
                            CelsiusLow = 15
                        },
                        new
                        {
                            Id = "Warm",
                            CelsiusHigh = 25,
                            CelsiusLow = 20
                        },
                        new
                        {
                            Id = "Balmy",
                            CelsiusHigh = 30,
                            CelsiusLow = 25
                        },
                        new
                        {
                            Id = "Hot",
                            CelsiusHigh = 35,
                            CelsiusLow = 30
                        },
                        new
                        {
                            Id = "Sweltering",
                            CelsiusHigh = 40,
                            CelsiusLow = 35
                        },
                        new
                        {
                            Id = "Scorching",
                            CelsiusLow = 40
                        });
                });

            modelBuilder.Entity("TestAPI.Models.Forecast", b =>
                {
                    b.HasOne("TestAPI.Models.Summary", "Summary")
                        .WithMany()
                        .HasForeignKey("SummaryId");

                    b.Navigation("Summary");
                });
#pragma warning restore 612, 618
        }
    }
}
